10 marks
Amazon RDS (Relational Database Service) instance and connecting it with SQL Akron 
### Step 1: Create an Amazon RDS Instance
1. Sign in to AWS Management Console:
   - Open the AWS Management Console at [AWS Console](https://aws.amazon.com/console/).
   - Sign in with your AWS credentials.
2. Navigate to RDS Service:
   - In the AWS Management Console, navigate to `Services` and select `RDS` under the `Database` category.
3. Launch a New DB Instance:
   - Click on the `Create database` button.
   - Choose the database creation method. Select `Standard Create` for more configuration options.
4. Select Database Engine:
   - Choose the database engine you want (e.g., MySQL, PostgreSQL, SQL Server).
5. Specify DB Instance Details:
   - Choose the DB instance size (instance class), storage type, and allocate storage.
   - Set the DB instance identifier (a unique name for your database).
6. Set Master Username and Password:
   - Enter the master username and password. These credentials will be used to connect to your database.
7. Configure Network and Security:
   - Choose the Virtual Private Cloud (VPC) and subnet. 
   - Configure the VPC security group to allow inbound traffic on the database port (default is 3306 for MySQL).
8. Additional Configuration: 
   - Configure additional settings like backups, monitoring, and maintenance options as per your requirements.
9. Create the Database: 
   - Review the configuration settings.
   - Click on `Create database` to launch the RDS instance.

### Step 2: Configure Security Groups
1. Modify Security Group: 
   - Navigate to `EC2 Dashboard` > `Security Groups`.
   - Find the security group associated with your RDS instance.
   - Edit the inbound rules to allow access from your IP address or the IP range that will be accessing the database. 
   - Add a rule to allow traffic on the appropriate port (e.g., 3306 for MySQL).

### Step 3: Obtain Database Connection Details
1. Find Endpoint: 
   - In the RDS Dashboard, find your newly created RDS instance.
   - Copy the `Endpoint` and note the `Port` number. The endpoint will be used to connect to your database.

### Step 4: Connect to RDS Using SQL Akron (or similar SQL Client)
1. Open SQL Akron: 
   - Launch SQL Akron or your preferred SQL client software.
2. Create a New Connection: 
   - Go to the connection settings or connection manager in the SQL client.
3. Enter Connection Details: 
   - Enter the connection name (any descriptive name).
   - Enter the RDS endpoint obtained earlier in the `Hostname` field.
   - Enter the `Port` number.
   - Enter the master username in the `Username` field.
   - Enter the master password in the `Password` field.
4. Test the Connection: 
   - Use the `Test Connection` button to verify that the connection settings are correct.
   - If the connection is successful, save the connection settings.

5. Connect to the Database: 
   - Once the connection settings are saved, you should be able to connect to your RDS instance.
   - Use SQL Akron to execute queries, manage your database schema, and perform other database tasks.

***************************************************
VPC with public and private subnets
### Step 1: Create a VPC
1. Sign in to AWS Management Console:
   - Open the AWS Management Console at [AWS Console](https://aws.amazon.com/console/).
   - Sign in with your AWS credentials.
2. Navigate to VPC Service:
   - In the AWS Management Console, navigate to `Services` and select `VPC` under the `Networking & Content Delivery` category.
3. Create a VPC:
   - Click on `Your VPCs` in the left navigation pane.
   - Click on the `Create VPC` button.
   - Enter a name for your VPC (e.g., `MyVPC`).
   - Enter a CIDR block (e.g., `10.0.0.0/16`).
   - Leave other options as default unless you have specific requirements.
   - Click on `Create VPC`.
### Step 2: Create Subnets
1. Create a Public Subnet:
   - In the VPC dashboard, click on `Subnets` in the left navigation pane.
   - Click on `Create subnet`.
   - Select the VPC you just created.
   - Enter a name for the subnet (e.g., `Public Subnet`).
   - Choose an availability zone (e.g., `us-east-1a`).
   - Enter a CIDR block (e.g., `10.0.1.0/24`).
   - Click on `Create subnet`.
2. Create a Private Subnet:
   - Repeat the process for creating a subnet.
   - Enter a name for the subnet (e.g., `Private Subnet`).
   - Choose a different availability zone for high availability (e.g., `us-east-1b`).
   - Enter a CIDR block (e.g., `10.0.2.0/24`).
   - Click on `Create subnet`.
### Step 3: Create and Attach an Internet Gateway
1. Create an Internet Gateway:
   - In the VPC dashboard, click on `Internet Gateways` in the left navigation pane.
   - Click on `Create internet gateway`.
   - Enter a name for the Internet gateway (e.g., `MyIGW`).
   - Click on `Create internet gateway`.
2. Attach the Internet Gateway to Your VPC:
   - Select the newly created Internet gateway.
   - Click on `Actions` and select `Attach to VPC`.
   - Select your VPC from the dropdown and click `Attach internet gateway`.
### Step 4: Configure Route Tables
1. Create a Route Table for the Public Subnet:
   - In the VPC dashboard, click on `Route Tables` in the left navigation pane.
   - Click on `Create route table`.
   - Enter a name (e.g., `PublicRouteTable`).
   - Select your VPC.
   - Click on `Create`.

2. Add a Route to the Internet Gateway:
   - Select the newly created route table.
   - Click on `Routes` tab and then `Edit routes`.
   - Click `Add route`.
   - In the `Destination` field, enter `0.0.0.0/0`.
   - In the `Target` field, select the Internet gateway you created.
   - Click on `Save routes`.

3. Associate the Route Table with the Public Subnet:
   - Click on the `Subnet associations` tab.
   - Click `Edit subnet associations`.
   - Select the public subnet and click `Save`.
4. Create a Route Table for the Private Subnet:
   - Repeat the process for creating a route table.
   - Enter a name (e.g., `PrivateRouteTable`).
   - Select your VPC.
   - Click on `Create`.
### Step 5: Configure Network Address Translation (NAT) for Private Subnet
1. Create a NAT Gateway:
   - In the VPC dashboard, click on `NAT Gateways` in the left navigation pane.
   - Click on `Create NAT Gateway`.
   - Select the public subnet.
   - Choose or create an Elastic IP address for the NAT gateway.
   - Click on `Create a NAT gateway`.

2. Add a Route to the NAT Gateway for Private Subnet:
   - Select the private route table.
   - Click on `Routes` tab and then `Edit routes`.
   - Click `Add route`.
   - In the `Destination` field, enter `0.0.0.0/0`.
   - In the `Target` field, select the NAT gateway.
   - Click on `Save routes`.

3. Associate the Route Table with the Private Subnet:
   - Click on the `Subnet associations` tab.
   - Click `Edit subnet associations`.
   - Select the private subnet and click `Save`.

### Step 6: Launch an Instance

1. Navigate to EC2 Service:
   - In the AWS Management Console, navigate to `Services` and select `EC2` under the `Compute` category.
2. Launch an Instance:
   - Click on `Instances` in the left navigation pane.
   - Click on `Launch Instance`.
   - Select an Amazon Machine Image (AMI).
   - Choose an instance type.
   - Configure instance details:
     - Select your VPC and public subnet.
     - Ensure `Auto-assign Public IP` is enabled for the public instance.
   - Add storage as needed.
   - Add tags (optional).
   - Configure security group:
     - Create a new security group or select an existing one.
     - Add rules to allow traffic (e.g., SSH for Linux instances on port 22).
   - Review and launch the instance.
   - Select an existing key pair or create a new one for SSH access.

### Additional Steps for Private Instance (Optional)

1. Launch a Private Instance:
   - Follow the same steps to launch an instance but select the private subnet.
   - Ensure `Auto-assign Public IP` is disabled for the private instance.

2. Connect to the Private Instance:
   - Connect to the public instance first.
   - From the public instance, use SSH to connect to the private instance using its private IP address.

*******************************************************************
Application Load Balancer (ALB) and Network Load Balancer (NLB) 
## Application Load Balancer (ALB)

### Step 1: Set Up Your Environment

1. Launch Instances:
   - Launch at least two EC2 instances that will serve as your backend servers.
   - Ensure these instances are in different subnets across different Availability Zones for high availability.

### Step 2: Create a Target Group

1. Navigate to EC2 Dashboard:
   - Open the AWS Management Console and go to `EC2` service.

2. Create Target Group:
   - In the left navigation pane, click on `Target Groups`.
   - Click on `Create target group`.
   - Select `Instances` as the target type.
   - Give your target group a name (e.g., `my-app-target-group`).
   - Select the VPC where your instances are located.
   - Choose `HTTP` or `HTTPS` as the protocol and set the port (e.g., 80 for HTTP).
   - Click `Next`.
   - Register your instances to the target group.
   - Click on `Create target group`.

### Step 3: Create an Application Load Balancer

1. Navigate to Load Balancers:
   - In the left navigation pane, click on `Load Balancers`.
   - Click on `Create Load Balancer`.
   - Select `Application Load Balancer`.
2. Configure Load Balancer:
   - Enter a name for the ALB (e.g., `my-app-load-balancer`).
   - Select the scheme (`Internet-facing` for public access).
   - Select the IP address type (`IPv4`).
   - Choose the VPC and select at least two Availability Zones.
   - Click `Next: Configure Security Settings`.

3. Configure Security Settings:
   - You can set up an HTTPS listener here if you have a certificate, or continue with HTTP.
   - Click `Next: Configure Security Groups`.

4. Configure Security Groups:
   - Select an existing security group or create a new one.
   - Ensure the security group allows inbound traffic on the appropriate port (e.g., port 80 for HTTP).

5. Configure Routing:
   - Select the target group you created earlier.
   - Click `Next: Register Targets`.

6. Register Targets:
   - Ensure your instances are registered.
   - Click `Next: Review` and then `Create`.

### Step 4: Test the Load Balancer

- Note the DNS name of the ALB from the Load Balancer description.
- Access the DNS name in your browser to ensure traffic is being routed to your backend instances.

## Network Load Balancer (NLB)

### Step 1: Set Up Your Environment

1. Launch Instances:
   - Launch at least two EC2 instances that will serve as your backend servers.
   - Ensure these instances are in different subnets across different Availability Zones for high availability.
### Step 2: Create a Target Group

1. Navigate to EC2 Dashboard:
   - Open the AWS Management Console and go to `EC2` service.

2. Create Target Group:
   - In the left navigation pane, click on `Target Groups`.
   - Click on `Create target group`.
   - Select `Instances` as the target type.
   - Give your target group a name (e.g., `my-network-target-group`).
   - Select the VPC where your instances are located.
   - Choose `TCP` as the protocol and set the port (e.g., 80).
   - Click `Next`.
   - Register your instances to the target group.
   - Click on `Create target group`.

### Step 3: Create a Network Load Balancer

1. Navigate to Load Balancers:
   - In the left navigation pane, click on `Load Balancers`.
   - Click on `Create Load Balancer`.
   - Select `Network Load Balancer`.

2. Configure Load Balancer:
   - Enter a name for the NLB (e.g., `my-network-load-balancer`).
   - Select the scheme (`Internet-facing` for public access).
   - Select the IP address type (`IPv4`).
   - Choose the VPC and select at least two Availability Zones.
   - Click `Next: Configure Security Groups`.

3. Configure Listeners and Routing:
   - Select the target group you created earlier.
   - Click `Next: Register Targets`.

4. Register Targets:
   - Ensure your instances are registered.
   - Click `Next: Review` and then `Create`.

### Step 4: Test the Load Balancer

- Note the DNS name of the NLB from the Load Balancer description.
- Access the DNS name in your browser or use a tool like `curl` to ensure traffic is being routed to your backend instances.

## Additional Configuration and Best Practices

### Health Checks

- Configure health checks in the target group settings to ensure the load balancer only routes traffic to healthy instances.

### Security Groups

- For ALB, ensure the security groups allow inbound traffic from the load balancer on the appropriate ports.
- For NLB, ensure network ACLs and security groups are properly configured to allow traffic.

### Scaling

- Use Auto Scaling groups to automatically manage the number of instances based on demand.

***************************************************
Amazon CloudWatch
## Step 1: Set Up CloudWatch
### Step 1.1: Access CloudWatch
1. Sign in to AWS Management Console:
   - Open the AWS Management Console at [AWS Console] (https://aws.amazon.com/console/).
   - Sign in with your AWS credentials.

2. Navigate to CloudWatch:
   - In the AWS Management Console, navigate to `Services` and select `CloudWatch` under the `Management & Governance` category.

### Step 1.2: Set Up Metrics Monitoring
1. Select Metrics:
   - In the CloudWatch dashboard, click on `Metrics` in the left navigation pane.
   - Select the namespace of the service you want to monitor (e.g., `EC2`, `RDS`, `S3`).

2.View and Add Metrics:
   - Select the specific metrics you want to monitor. For example, for EC2, you might choose `CPUUtilization`, `DiskReadOps`, `Networking`, etc.
   - Click on the metrics to view detailed graphs and statistics.

### Step 1.3: Create Alarms
1. Create a New Alarm:
   - In the CloudWatch dashboard, click on `Alarms` in the left navigation pane.
   - Click on the `Create Alarm` button.

2. Select a Metric:
   - Click on `Select metric` and choose the appropriate namespace and metric.
   - For instance, select `EC2` and then `Per-Instance Metrics` to choose a specific instance metric like `CPUUtilization`.
3. Configure Alarm Conditions:
- Specify the metric conditions for the alarm. For example, set a threshold for `CPUUtilization` to be greater than `80%` for more than `5` minutes.

4. Configure Actions:
   - Choose what action to take when the alarm state is triggered.
   - Configure SNS notifications to send alerts via email, SMS, or other communication channels. Select an existing SNS topic or create a new one.

5. Name and Create the Alarm:
   - Give your alarm a name and description.
   - Review the settings and click on `Create alarm`.

### Step 1.4: Create Dashboards
1. Create a New Dashboard:
   - In the CloudWatch dashboard, click on `Dashboards` in the left navigation pane.
   - Click on the `Create dashboard` button.
   - Enter a name for the dashboard and click `Create`.

2. Add Widgets to the Dashboard:
   - Click on `Add widget`.
   - Select the type of widget (e.g., line graph, stacked area, number, text, etc.).
   - Choose the metric you want to display in the widget.
   - Configure the widget settings (e.g., time range, statistic type).
   - Click on `Create widget`.

3. Customize Dashboard Layout:
   - Drag and drop widgets to arrange them on the dashboard.
   - Resize widgets to customize the view.

### Step 1.5: Enable Detailed Monitoring
1. Enable Detailed Monitoring for EC2:
   - Go to the `EC2` Dashboard.
   - Select the instances you want to enable detailed monitoring for.
   - Click on `Actions` > `Monitor and troubleshoot` > `Enable detailed monitoring`.
   - This provides data at 1-minute intervals instead of the default 5-minute intervals.
### Step 1.6: Configure Log Monitoring
1. Set Up CloudWatch Logs:
   - In the CloudWatch dashboard, click on `Logs` in the left navigation pane.
   - Create a new log group by clicking `Actions` > `Create log group`.
   - Enter a name for the log group and click `Create`.

2. Configure Log Streams:
   - Click on the log group you created.
   - Click on `Actions` > `Create log stream`.
   - Enter a name for the log stream and click `Create`.

3. Install CloudWatch Agent:
   - Install the CloudWatch Agent on your instances to push logs and custom metrics to CloudWatch.
   - Configure the agent to specify which logs to monitor. Use the `amazon-CloudWatch-agent-config-wizard` to help with configuration.

4. Start the CloudWatch Agent:
   - Start the CloudWatch Agent on your instances to begin sending logs to CloudWatch.

### Step 1.7: Set Up CloudWatch Events
1. Create a Rule:
   - In the CloudWatch dashboard, click on `Rules` under `Events`.
   - Click on `Create rule`.

2. Configure Event Source:
   - Select an event source (e.g., EC2 instance state change).
   - Configure the event pattern or schedule as needed.

3. Add Targets:
   - Choose a target for the event (e.g., an SNS topic to send notifications, a Lambda function to trigger, etc.).
   - Configure the target settings.

4. Name and Create the Rule:
   - Give your rule a name and description.
   - Click on `Create rule`.

***************************************************
AWS Elastic Beanstalk
### Step 1: Prepare Your Application
1. Package Your Application:
   - Ensure your application is ready for deployment. Elastic Beanstalk supports various platforms like Node.js, Python, Ruby, Java, .NET, PHP, Go, and Docker.
   - Package your application code into a zip file or container image (depending on the platform).

### Step 2: Create an Elastic Beanstalk Environment
1. Sign in to AWS Management Console:
   - Open the AWS Management Console at [AWS Console](https://aws.amazon.com/console/).
   - Sign in with your AWS credentials.
2. Navigate to Elastic Beanstalk:
   - In the AWS Management Console, navigate to `Services` and select `Elastic Beanstalk` under the `Compute` category.
3. Create a New Application:
   - Click on `Create a new environment`.
   - Select the `Web server environment` and click on `Select`.
4. Configure Application Information:
   - Enter an application name (e.g., `MyApp`).
   - Optionally, provide a description.
   - Click `Next`.
5. Choose a Platform:
   - Select the platform your application is built on (e.g., `Node.js`, `Python`, `Java`).
   - Choose the platform branch and version.
   - Click `Next`.
6. Upload Your Application Code:
   - Select `Upload your code`.
   - Click on `Choose file` to upload your application package (zip file or container image).
   - Click `Next`.
7. Configure Environment:
   - Enter an environment name (e.g., `myapp-env`).
   - Enter a domain name prefix (e.g., `myapp`) which will be used for the environment URL (`myapp.elasticbeanstalk.com`).
   - Click `Next`.
8. Configure Environment Settings:
   - Optionally configure additional settings such as instance type, key pair for SSH access, and more.
   - Click `Next`.

9. Review and Create:
   - Review the configuration settings.
   - Click on `Create environment`.

### Step 3: Deploy Your Application

1. Monitor Environment Creation:
   - Wait for the environment to be created. This might take a few minutes.
   - The Elastic Beanstalk console will show the status of the environment creation process.

2. Access Your Application:
   - Once the environment is ready, you can access your application using the provided URL (`myapp.elasticbeanstalk.com`).

***************************************************
Auto Scaling group 
### Step 1: Launch Configuration or Launch Template
Option A: Launch Configuration
1. Sign in to AWS Management Console:
   - Open the AWS Management Console at [AWS Console](https://aws.amazon.com/console/).
   - Sign in with your AWS credentials.
2. Navigate to EC2:
   - In the AWS Management Console, go to `Services` and select `EC2` under the `Compute` category.
3. Create a Launch Configuration:
   - In the left navigation pane, under `Auto Scaling`, click on `Launch Configurations`.
   - Click on `Create launch configuration`.
   - Choose an AMI (Amazon Machine Image) for your instances.
   - Select an instance type.
   - Configure the details:
     - Give your launch configuration a name.
     - Add storage if needed.
   - Configure security groups:
     - Select an existing security group or create a new one.
   - Configure key pair:
     - Select an existing key pair or create a new one.
   - Click on `Create launch configuration`.
Option B: Launch Template (Recommended for newer setups)
1. Create a Launch Template:
   - In the left navigation pane, click on `Launch Templates`.
   - Click on `Create launch template`.
   - Provide a name and description for the launch template.
   - Configure template version and instance configuration:
     - Select AMI, instance type, key pair, security groups, and other configurations.
   - Click on `Create launch template`.
### Step 2: Create an Auto Scaling Group
1. Navigate to Auto Scaling Groups:
   - In the EC2 dashboard, under `Auto Scaling`, click on `Auto Scaling Groups`.
   - Click on `Create Auto Scaling group`.
2. **Configure Auto Scaling Group Basics:
   - Enter a name for the Auto Scaling group.
   - Select the launch configuration or launch template you created earlier.
   - Click `Next`.
3. Configure Network:
   - Select the VPC where your instances will be launched.
   - Choose one or more subnets in different Availability Zones for high availability.
   - Click `Next`.
5. Configure Group Size and Scaling Policies:
   - Set the desired capacity (number of instances).
   - Set the minimum and maximum number of instances.
   - Configure scaling policies:
     - Choose a scaling policy (e.g., Target Tracking, Step Scaling, or Simple Scaling).
     - For Target Tracking, specify a metric (e.g., CPU utilization) and a target value.
     - For Step Scaling, define step adjustments based on CloudWatch alarms.
     - For Simple Scaling, define a scaling action based on a CloudWatch alarm.
   - Click `Next`.
8. Review and Create:
   - Review all the settings.
   - Click on `Create Auto Scaling group`.

***************************************************
Amazon Directory Service (AD) 
### Step 1: Sign in to AWS Management Console
1. Open AWS Management Console:
   - Open your web browser and go to the [AWS Management Console](https://aws.amazon.com/console/).
   - Sign in using your AWS credentials.
### Step 2: Navigate to Directory Service
1. Go to Directory Service:
   - In the AWS Management Console, click on `Services` in the top left corner.
   - Under the `Security, Identity, & Compliance` category, select `Directory Service`.

### Step 3: Choose the Directory Type
1. Select Directory Type:
   - Click on the `Set up Directory` button.
   - Choose the directory type that fits your needs:
     - AWS Managed Microsoft AD**: Fully managed Microsoft Active Directory hosted on AWS.
     - AD Connector**: Connect your AWS resources with an existing on-premises AD.
     - Simple AD**: Standalone, managed directory on AWS that is compatible with Microsoft AD (for smaller setups).
### Step 4: Configure AWS Managed Microsoft AD (Example)
1. Select AWS Managed Microsoft AD:
   - Choose `AWS Managed Microsoft AD` and click `Next`.
2. Provide Directory Details:
   - Directory DNS name**: Provide a fully qualified domain name (e.g., `example.com`).
   - Directory NetBIOS name**: Provide a short name for your directory (e.g., `EXAMPLE`).
   - Description**: Optionally, add a description for your directory.
   - Admin password**: Set a password for the default administrator user.
3. Configure VPC:
   - Select the VPC where you want to deploy your directory.
   - Select subnets in different Availability Zones for high availability.

4. Review and Create:
   - Review your configuration settings.
   - Click on `Create directory`.

### Step 5: Wait for Directory to Be Created
1. Monitor Creation:
   - It may take several minutes for AWS to create the directory.
   - You can monitor the status on the Directory Service console. When the status changes to `Active`, your directory is ready to use.

### Step 6: Access and Manage the Directory
1. Access Directory:
   - After your directory is created, you can access it via the AWS Management Console.
   - Select your directory and click on `Actions` to manage it (e.g., reset the admin password, add/remove domain controllers).
2. Connect EC2 Instances:
   - Launch EC2 instances within the same VPC and subnets where your directory is deployed.
   - Ensure the security groups and network ACLs allow communication between your instances and the directory.
   - Join your instances to the domain:
     - Open the `System` properties on your instance.
     - Click on `Change settings`.
     - Go to the `Computer Name` tab and click `Change`.
     - Select `Domain` and enter the directory DNS name.
     - Provide the credentials for the admin user created during directory setup.

### Step 7: Configure and Manage Users and Groups
1. Access AD Administration Tools:
   - Install the Active Directory Administration Tools on a Windows instance joined to the domain.
   - Open the `Server Manager`, go to `Manage`, and select `Add Roles and Features`.
   - Install the `AD DS and AD LDS Tools`.


2. Manage Users and Groups:
   - Open the `Active Directory Users and Computers` console.
   - Create and manage users, groups, and organizational units (OUs) as needed.
   - Right-click on your domain in the console and select `New` to add users or groups.

### Step 9: Monitor and Maintain
1. Monitor Directory Health:
   - Use Amazon CloudWatch to monitor the health and performance of your directory.
   - Set up alarms for critical metrics.

2. Regular Maintenance:
   - Regularly review and manage user accounts and permissions.
   - Ensure your directory is updated and patched as needed.


***************************************************
AWS Key Management Service (KMS) 
### Step 1: Sign in to AWS Management Console
1. Open AWS Management Console:
   - Open your web browser and go to the [AWS Management Console] (https://aws.amazon.com/console/).
   - Sign in using your AWS credentials.

### Step 2: Navigate to KMS
1. Go to KMS:
   - In the AWS Management Console, click on `Services` in the top left corner.
   - Under the `Security, Identity, & Compliance` category, select `Key Management Service (KMS)`.

### Step 3: Create a Customer Managed Key (CMK)
1. Create a Key:
   - In the KMS dashboard, click on `Customer managed keys` in the left navigation pane.
   - Click on `Create key`.

2. Configure Key Type:
   - Choose `Symmetric` (recommended for most use cases) or `Asymmetric` based on your needs.
   - Click `Next`.

3. Configure Key Usage:
   - Choose the key usage (e.g., `Encrypt and decrypt` for a symmetric key).
   - Click `Next`.

4. Configure Key Settings:
   - Enter an alias for the key (e.g., `my-key-alias`).
   - Optionally, add a description.
   - Choose the key material origin (e.g., `KMS` if you want AWS to create the key material).
   - Click `Next`.
5. Define Key Administrative Permissions:
   - Specify the IAM users and roles that can administer the key.
   - Click `Next`.

6. Define Key Usage Permissions:
   - Specify the IAM users and roles that can use the key to encrypt and decrypt data.
   - Click `Next`.

7. Review and Create:
   - Review your key settings.
   - Click `Finish` to create the key.

### Step 4: Use the KMS Key
1. Encrypt Data Using the KMS Key:
   - AWS services like S3, EBS, RDS, etc., can use KMS keys to encrypt data.
   - For example, to encrypt an S3 bucket:
     - Go to the S3 service in the AWS Management Console.
     - Select the bucket you want to encrypt.
     - Click on the `Properties` tab.
     - Under `Default encryption`, choose `AWS-KMS` and select your KMS key alias from the dropdown menu.

### Step 5: Rotate the KMS Key
1. Enable Key Rotation:
   - In the KMS dashboard, select your customer managed key.
   - Click on the `Key rotation` tab.
   - Enable automatic key rotation (AWS will rotate the key annually).

### Step 6: Audit Key Usage
1. Enable CloudTrail:
   - AWS CloudTrail records API calls made to AWS KMS.
   - Go to the CloudTrail service in the AWS Management Console.
   - Create a new trail or use an existing one to monitor KMS API calls.
   - Ensure the trail is set to log all read and write events.
2. View KMS Key Usage Logs:
   - In the CloudTrail dashboard, go to `Event history`.
   - Filter events by `Event source` and select `kms.amazonaws.com` to view KMS-related API calls.

***************************************************
Amazon Lambda
### Step 1: Sign in to AWS Management Console
1. Open AWS Management Console:
   - Open your web browser and go to the [AWS Management Console](https://aws.amazon.com/console/).
   - Sign in using your AWS credentials.

### Step 2: Navigate to Lambda
1. Go to Lambda:
   - In the AWS Management Console, click on `Services` in the top left corner.
   - Under the `Compute` category, select `Lambda`.

### Step 3: Create a Lambda Function
1. Click Create Function:
   - In the Lambda dashboard, click on the `Create function` button.

2. Choose a Function Creation Method:
   - You have four options: `Author from scratch`, `Use a blueprint`, `Container image`, and `Browse serverless app repository`.
   - For this example, select `Author from scratch`.
3. Configure Basic Information:
   -  Function name**: Enter a name for your Lambda function (e.g., `MyFirstLambdaFunction`).
   - **Runtime**: Select the runtime for your function (e.g., `Python 3.8`, `Node.js 14.x`, `Java 11`, etc.).
   - Role: Choose or create an execution role:
     - Select `Create a new role with basic Lambda permissions` to automatically create a new role.
     - Alternatively, you can use an existing role or create a new one with specific policies.

4. Click Create Function:
   - Click on the `Create function` button at the bottom of the screen.

### Step 4: Configure the Lambda Function
1. Function Code:
   - In the `Function code` section, you can write your code directly in the inline code editor or upload a .zip file containing your code.
   - For example, for a simple Python function:

2. Handler:
   - Ensure that the handler is correctly set. For the above Python example, it should be `lambda_function.lambda_handler`.

3. Environment Variables (Optional):
   - You can add environment variables to configure your function without changing code.

### Step 5: Configure Triggers
1. Add Trigger:
   - In the `Designer` section, click on `Add trigger`.
   - Choose the event source that will trigger your Lambda function (e.g., API Gateway, S3, CloudWatch Events, etc.).

2. Configure Trigger:
   - Depending on the event source, configure the necessary settings. For example, for an S3 trigger:
     - Bucket: Select the S3 bucket.
     - **Event type**: Choose the event type (e.g., `All object create events`).
3. Add Trigger:
   - Click on `Add` to add the trigger to your Lambda function.
### Step 6: Test the Lambda Function
1. Create a Test Event:
   - In the Lambda function page, click on the `Test` tab.
   - Click on `Configure test event`.
2. Configure Test Event:
   - Choose an event template from the dropdown or create a custom event.
   - Name the test event and configure the event JSON. For example:
     ```json
     {         "key1": "value1",
         "key2": "value2",
         "key3": "value3"       }
     ```
3. Save and Test:
   - Click `Create` to save the test event.
   - Click `Test` to execute the Lambda function with the test event.
   - Review the execution results and logs to ensure the function works as expected.

***************************************************
Amazon S3 . Here's a step-by-step guide to creating and implementing a Lambda function in AWS:
### Step 1: Sign in to AWS Management Console
1. Open AWS Management Console:
   - Open your web browser and go to the [AWS Management Console](https://aws.amazon.com/console/).
   - Sign in using your AWS credentials.
### Step 2: Navigate to S3
1. Go to S3:
   - In the AWS Management Console, click on `Services` in the top left corner.
   - Under the `Storage` category, select `S3`.
### Step 3: Create an S3 Bucket
1. Click on Create Bucket:
   - In the S3 dashboard, click on the `Create bucket` button.
2. Configure Bucket Settings:
   - Bucket name**: Enter a unique name for your bucket (e.g., `mota23`).
   - AWS region**: Select the AWS region where you want the bucket to be created.
3. Object Ownership:
   - In the `Object Ownership` section, select `ACLs disabled` (recommended).
   - Ensure that `Bucket owner preferred` is selected.
4. Block Public Access Settings:
   - Uncheck `Block all public access`.
   - Acknowledge that you understand the risks by checking the acknowledgment box.
5. Bucket Versioning:
   - You can enable bucket versioning if required (optional).
6. Create the Bucket:
   - Review your settings.
   - Click on `Create bucket`.
### Step 4: Configure Bucket Permissions
1. Select Your Bucket:
   - In the S3 dashboard, click on the name of the bucket you created (e.g., `mota23`).
2. Go to Permissions:
   - Click on the `Permissions` tab.
3. Edit Bucket Policy:
   - Scroll down to the `Bucket policy` section.
   - Click on `Edit`.

### Step 5: Generate and Apply Bucket Policy
1. Generate Policy:
   - Click on `Policy generator` or go to the [AWS Policy Generator](https://awspolicygen.s3.amazonaws.com/policygen.html).

2. Configure Policy:
   - Select Type of Policy**: Choose `S3 bucket policy
   - Principal: Enter `*` to allow access from any user
   - Actions: Select `GetObject`.
   - ARN: Enter the ARN of your bucket. The ARN format is `arn:aws:s3:::bucket-name/*`. For example: `arn:aws:s3:::mota23/*`.

3. Add Statement:
   - Click `Add Statement` to add the policy statement.

4. Generate Policy:
   - Click on `Generate Policy`.
5. Copy Policy:
   - Copy the generated policy JSON.
6. Apply Policy:
   - Paste the copied policy JSON into the `Bucket policy editor` in the S3 console.
   - Click on `Save changes`.
### Step 6: Create a Folder in the Bucket
1. Create Folder:
   - In the bucket overview, click on `Create folder`.
   - Enter a folder name (e.g., `myfolder`).
   - Click `Create folder`.
### Step 7: Upload a File to the Bucket
1. Upload File:
   - In the bucket overview or inside the folder you created, click on `Upload`.
   - Click on `Add files` and select the file you want to upload from your local machine.
   - Click `Upload`.

***************************************************
RDS (Relational Database Service) instance.
Step 1: Create an RDS Instance
Log in to the AWS Management Console: Go to AWS Management Console.
Navigate to the RDS Dashboard:
In the top search bar, type RDS and select the RDS dashboard from the dropdown.
Create a Database:
Click the Create database button.
Select Database Creation Method:
Choose the Standard Create option.
Choose a Database Engine:
Select MySQL.
Specify the DB Instance Details:
Engine version: Select the desired MySQL version.
Template: Choose Free tier if eligible, or another template based on your needs.
DB instance identifier: Enter a unique identifier for your database (e.g., MyMySQLDB).
Master username: Enter a master username (e.g., admin).
Master password: Enter and confirm a master password.
Configure Instance Specifications:
DB instance class: Choose the instance class (e.g., db.t2.micro for free tier).
Storage: Configure the allocated storage (e.g., 20 GiB).
Configure Connectivity:
Virtual Private Cloud (VPC): Select the VPC you created earlier.
Subnet group: You can use the default subnet group or create a new one.
Public accessibility: Choose Yes if you want the instance to be publicly accessible.
VPC security groups: Choose existing security groups or create a new one to allow necessary access (e.g., MySQL/Aurora).
Additional Configuration:
Initial database name: Optionally, specify a name for the initial database.
DB parameter group & option group: Use the default settings unless you need specific configurations.
Backup: Configure backup retention period and window.
Monitoring: Enable enhanced monitoring if needed.
Maintenance: Configure maintenance preferences.
Review and Create:
Review all the configurations.
Click the Create database button.
Step 2: Accessing the RDS Instance
Retrieve the Endpoint:
Once the RDS instance is created, go to the Databases section in the RDS dashboard.
Select your RDS instance (MyMySQLDB).
Copy the endpoint under the Connectivity & security tab.
Connect to the Database:
Use a MySQL client or a command-line tool to connect to the database.
Example command using mysql CLI:
bash
Copy code
mysql -h <your-db-endpoint> -u admin -p
Replace <your-db-endpoint> with the endpoint of your RDS instance.
Step 3: Security Configuration
Modify Security Group:
Ensure the security group associated with your RDS instance allows inbound traffic on port 3306 (the default MySQL port) from your IP or VPC.
Navigate to the EC2 dashboard.
In the left sidebar, select Security Groups.
Find and select the security group associated with your RDS instance.
Click Edit inbound rules and add a rule:
Type: MySQL/Aurora
Protocol: TCP
Port range: 3306
Source: Your IP or custom range.
Step 4: Database Management
Create Tables and Load Data:
Once connected to your RDS instance, you can create tables and load data using SQL commands.
Example:
sql
Copy code
CREATE DATABASE mydatabase;
USE mydatabase;
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL
);
INSERT INTO users (username, email) VALUES ('john_doe', 'john@example.com');
Backup and Restore:

Automated Backups: Configured during the instance setup.
Manual Snapshots: Navigate to the RDS dashboard, select your database, and click Actions -> Take snapshot.
Monitoring and Maintenance:
CloudWatch Metrics: Access RDS performance metrics via CloudWatch.
Maintenance Window: Configure maintenance windows for patching and updates in the RDS dashboard under instance details.

***************************************************
#Kinesis
1.Sign in to the AWS Management Console and open the Kinesis console 
2.Choose Data Streams in the navigation pane.
3.In the navigation bar, expand the Region selector and choose a Region.
4.Choose Create Kinesis stream.
5.Enter a name for your stream (for example, StockTradeStream).
6.Enter 1 for the number of shards, but leave Estimate the number of shards you'll need collapsed.
7.Choose Create Kinesis stream.

*************************************************
6.Install and configure docker on window
 Build a custom docker image for ngnix webserver
Upload/push the image on dockerhub
Ans:-1. Install Docker on Windows
Step 1: Download Docker Desktop
Go to the Docker Desktop download page.
Click the "Download for Windows" button.

Step 2: Install Docker Desktop
Open the downloaded installer file (e.g., Docker Desktop Installer.exe).
Follow the installation instructions.
Make sure to check the option to enable WSL 2 (Windows Subsystem for Linux) during installation if prompted.
Once the installation is complete, restart your computer if required.

Step 3: Launch Docker Desktop
Open Docker Desktop from the Start menu or desktop shortcut.
Docker will take a few minutes to start. Once running, you should see the Docker icon in your system tray (bottom-right corner of the screen).

Step 4: Verify Docker Installation
Open Command Prompt or PowerShell.
Type docker --version and press Enter. You should see the Docker version information.
2. Build a Custom NGINX Docker Image
Step 1: Create a Working Directory
Create a new folder on your computer where you will store the files for your custom Docker image. For example, C:\nginx-docker.
Step 2: Create a Dockerfile
Open a text editor (like Notepad) and create a new file named Dockerfile (without any extension).
Add the following content to the Dockerfile:
Dockerfile

# Use the official NGINX base image
FROM nginx:latest

# Copy custom HTML file to the NGINX web root
COPY index.html /usr/share/nginx/html/

# Expose port 80
EXPOSE 80
Save the Dockerfile in your working directory (C:\nginx-docker).
Step 3: Create a Custom HTML File

In the same working directory, create a new file named index.html.
Add some basic HTML content to the file. For example:
html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>My Custom NGINX Page</title>
</head>
<body>
    <h1>Hello from my custom NGINX server!</h1>
</body>
</html>
Save the index.html file.
Step 4: Build the Docker Image

Open Command Prompt or PowerShell and navigate to your working directory:
cd C:\nginx-docker
Build your custom Docker image using the following command:

docker build -t mycustomnginx .
This command tells Docker to build an image with the tag mycustomnginx using the Dockerfile in the current directory.
3. Upload/Push the Image to Docker Hub
Step 1: Create a Docker Hub Account

Go to Docker Hub and sign up for a free account if you don't already have one.
Step 2: Log in to Docker Hub from Docker CLI

In Command Prompt or PowerShell, log in to your Docker Hub account:
docker login
Enter your Docker Hub username and password when prompted.
Step 3: Tag the Docker Image for Docker Hub

Tag your image with your Docker Hub username and repository name. Replace yourusername with your Docker Hub username:
docker tag mycustomnginx yourusername/mycustomnginx
Step 4: Push the Image to Docker Hub

Push the tagged image to your Docker Hub repository:
docker push yourusername/mycustomnginx
This will upload your custom NGINX image to Docker Hub.
